carat <= 0.25
)
diamonds %>%
filter(
carat <= 0.25
)
diamonds %>%
filter(
carat <= 0.25
)
diamonds %>%
filter(
carat <= 0.25
)
diamonds %>%
filter(
carat <= 0.25
)
diamonds %>%
filter(
carat <= 0.25
)
diamonds %>%
filter(
carat <= 0.25
)
diamonds %>%
filter(
carat <= 0.25
)
diamonds %>%
filter(
carat <= 0.25
)
diamonds %>%
filter(
carat <= 0.25
)
diamonds
diamonds %>%
filter(
carat <= 0.25
)
diamonds
library(stats)
library(tidyverse)
library(GGally)
library(patchwork)
library(lubridate)
diamonds
diamonds %>%
filter(
carat <= 0.25
)
df <- iris
View(df)
View(df)
diamonds %>%
filter(
carat <= 0.25
)
pkgs <- c("tidyverse", "plotly", "rmarkdown", "mlr3")
install.packages(pkgs)
Yes
pkgs <- c("tidyverse", "plotly", "rmarkdown", "mlr3")
install.packages(pkgs)
diamonds %>%
filter(
carat <= 0.25
)
xcode-select --install
diamonds %>%
filter(
carat <= 0.25
)
# パッケージインストール
devtools::install_version("tidyverse", version = "1.3.1", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
devtools::install_version("tidymodels", version = "0.1.3", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
devtools::install_version("glmnet", version = "4.1-2", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
devtools::install_version("rpart", version = "4.1-15", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
devtools::install_version("rpart", version = "4.1-15", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
install.packages("RcppEigen")
devtools::install_version("ranger", version = "0.12.1", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE, dependency = FALSE)
devtools::install_version("nnet", version = "7.3-16", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
devtools::install_version("xgboost", version = "1.4.1.1", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
#remotes::install_github("curso-r/treesnip", quiet = TRUE, upgrade = FALSE)
devtools::install_version("lightgbm", version = "3.2.1", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
#remotes::install_github("curso-r/treesnip", quiet = TRUE, upgrade = FALSE)
devtools::install_version("lightgbm", version = "3.2.1", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
devtools::install_url('https://github.com/catboost/catboost/releases/download/v0.26/catboost-R-Darwin-0.26.tgz', INSTALL_opts = c("--no-multiarch", "--no-test-load"), quiet = TRUE, upgrade = FALSE)
install.packages("torch")
devtools::install_version("tabnet", version = "0.2.0", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
devtools::install_version("plotly", version = "4.9.4.1", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
devtools::install_version("plotly", version = "4.9.4.1", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
devtools::install_version("skimr", version = "2.1.3", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
devtools::install_version("GGally", version = "2.1.2", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
devtools::install_version("DALEX", version = "2.2.1", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
devtools::install_version("DALEXtra", version = "2.1.1", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
#remotes::install_github("curso-r/treesnip", quiet = TRUE, upgrade = FALSE)
devtools::install_version("lightgbm", version = "3.2.1", repos = "https://cran.ism.ac.jp", quiet = TRUE, upgrade = FALSE)
library(treesnip)
install.packages("treesnip")
library(treesnip)
library(treesnip)
library(plotly)
library(skimr)
library(GGally)
library(withr)
library(tabnet)
library(modeldata)
diamonds
diamonds %>%
filter(
carat <= 0.25
)
remotes::install_github("curso-r/treesnip", quiet = TRUE, upgrade = FALSE)
library(treesnip)
library(treesnip)
library(plotly)
library(skimr)
library(GGally)
library(GGally)
library(withr)
library(tabnet)
library(modeldata)
library(treesnip)
df =
tibble(
No = 1:7,
gender =
c("M","F","F","M","F","M","M"),
height =
c(165,150,170,165,195,180)
)
library(plotly)
library(lightgbm) # lightgbmを一番先に読み込まないと使用する際にエラーが発生．．．
library(stats)
library(MASS)
library(tidyverse)
library(tidymodels)
library(treesnip)
library(plotly)
library(skimr)
library(GGally)
library(withr)
library(tabnet)
library(modeldata)
df =
tibble(
No = 1:7,
gender =
c("M","F","F","M","F","M","M"),
height =
c(165,150,170,165,195,180)
)
diamonds
df =
tibble(
No = 1:7,
gender =
c("M","F","F","M","F","M","M"),
height =
c(165,150,170,165,195,180)
)
# 「packages」フォルダ内のパッケージを使用するよう設定
.libPaths("packages")
# パッケージ読み込み
library(lightgbm) # lightgbmを一番先に読み込まないと使用する際にエラーが発生．．．
library(stats)
library(MASS)
library(tidyverse)
library(tidymodels)
library(treesnip)
library(plotly)
library(skimr)
library(GGally)
library(withr)
library(tabnet)
library(modeldata)
# データ定義：クレジットデータ
data("credit_data")
credit_data = tibble(credit_data)
# 既知データ
known =
credit_data %>%
initial_split(known, prop = 0.8, strata = "Status") %>%
with_seed(1234, .) %>%
training()
# 未知データ
unknown =
credit_data %>%
initial_split(known, prop = 0.8, strata = "Status") %>%
with_seed(1234, .) %>%
testing()
# 初期分割データ
initial_split =
initial_split(known, prop = 0.8, strata = "Status") %>%
with_seed(1234, .)
# 学習データ
train = training(initial_split)
# 評価データ
test = testing(initial_split)
# 分割データ
stratified_splits =
vfold_cv(train, v = 4, strata = "Status") %>%
with_seed(1234, .)
# 図の書式
theme_set(theme_linedraw(base_size = 25, base_family = "Helvetica"))
df =
tibble(
No = 1:7,
gender =
c("M","F","F","M","F","M","M"),
height =
c(165,150,170,165,195,180)
)
diamonds %>%
filter(
carat <= 0.25
)
df =
tibble(
No = 1:7,
gender =
c("M","F","F","M","F","M","M"),
height =
c(165,150,170,165,195,180)
)
df =
tibble(
No = 1:7,
gender =
c("M", "F", "F", "M", "F", "M", "M"),
height =
c(165, 150, 170, 165, 195, 180)
)
df =
tibble(
No = 1:7,
gender =
c("M", "F", "F", "M", "F", "M", "M"),
height =
c(165, 150, 170, 175, 165, 195, 180)
)
df =
tibble(
No = 1:7,
gender =
c("M", "F", "F", "M", "F", "M", "M"),
height =
c(165, 150, 170, 175, 165, 195, 180)
)
df
df %>%
filter(
gender == "F"
)
df %>%
filter(
c(FALSE, TRUE,FALSE,TRUE,FALSE,FALSE)
)
df %>%
filter(
c(FALSE, TRUE,TRUE,FALSE,TRUE,FALSE,FALSE)
)
diamonds %>%
filter(
price == 337
)
diamonds %>%
filter(
depth >= 62
)
diamonds %>%
filter(
between(cartat,0.23,0.27)
)
library(plotly)
library(skimr)
library(GGally)
library(withr)
library(tabnet)
library(modeldata)
# なぜか.RprofileからDALEXtraを読み込もうとするとエラーが発生．．．
#library(DALEXtra)
# データ定義：クレジットデータ
data("credit_data")
credit_data = tibble(credit_data)
# 既知データ
known =
credit_data %>%
initial_split(known, prop = 0.8, strata = "Status") %>%
with_seed(1234, .) %>%
training()
# 未知データ
unknown =
credit_data %>%
initial_split(known, prop = 0.8, strata = "Status") %>%
with_seed(1234, .) %>%
testing()
# 初期分割データ
initial_split =
initial_split(known, prop = 0.8, strata = "Status") %>%
with_seed(1234, .)
# 学習データ
train = training(initial_split)
# 評価データ
test = testing(initial_split)
# 分割データ
stratified_splits =
vfold_cv(train, v = 4, strata = "Status") %>%
with_seed(1234, .)
# 図の書式
theme_set(theme_linedraw(base_size = 25, base_family = "Helvetica"))
diamonds %>%
filter(
between(cartat,0.23,0.27)
)
diamonds %>%
filter(
depth >= 62
)
diamonds %>%
filter(
between(cartat,0.23,0.27)
)
diamonds %>%
filter(
between(carat,0.23,0.27)
)
diamonds$cut %>% levels()
diamonds %>%
filter(
between(carat,0.23,0.27)
)
diamonds %>%
filter(
carat >= 0.23, carat >= 0.27
)
diamonds %>%
filter(
carat >= 0.23, carat <= 0.27
)
diamonds %>%
filter(
cut >= "Good"
)
diamonds$cut %>% levels()
diamonds %>%
filer(
color != "E"
)
diamonds %>%
filter(
color != "E"
)
diamonds %>%
filter(
color != "E"
)
diamonds %>%
filter(
color %in% c("I","J")
)
diamonds %>%
filter(is.na(cut))
df =
tibble(
col =
c(1,3,NA,5,4,8,NA,9,NA)
)
df %>%
filter(is.na(col))
diamonds %>%
filter(
depth >= 62 & color == "H"
)
diamonds %>%
filter(
depth >= 62 , color == "H"
)
diamonds %>%
filter(
depth >= 62 | color == "H"
)
diamonds %>%
filter(
xor(depth >= 62 , color == "H")
)
diamonds %>%
filter(
d!(epth >= 62 , color == "H")
)
diamonds %>%
filter(
!(depth >= 62 , color == "H")
)
diamonds %>%
filter(
!(depth >= 62 , color == "H")
)
diamonds %>%
filter(
!(depth >= 62 , color == "H")
)
diamonds %>%
filter(
!(depth >= 62 & color == "H")
)
iris =
iris %>% as_tibble()
iris %>%
select(Sepal.Lenght, Species)
iris %>%
select(Sepal.Length, Species)
iris =
iris %>%
as_tibble()
iris %>%
select(
Sepal.Length, Species
)
iris %>%
select(
1,5
)
iris %>%
select(Sepal.Length:Petal.Width)
iris %>%
select(-Sepal.Length,-Petal.Width)
iris %>%
select(-Sepal.Length,-Petal.Width)
iris %>%
select(starts_with("Sepal"))
iris %>%
select(ends_with("Width"))
iris %>%
select(contains("1.L"))
iris %>%
select(matches("^Se.*en.*"))
iris %>%
select(Sepal.Length,Petal.Length)
var = c("Sepal.Length","Petal.Length")
iris %>%
select(Sepal.Length,Petal.Length)
iris %>%
select(all_of(var))
iris
iris %>%
select(everything())
iris %>%
select(Species, everything())
iris %>%
select(where(is.double))
diamonds
diamonds %>%
mutate(
new =
"test"
) %>%
select(new,everything())
diamonds %>%
mutate(
new =
2*depth+5*table
) %>%
select(new,everything())
diamonds %>%
distinct(color)
diamonds %>%
mutate(
new=
if_else(
color=="E",
"E",
"not E"
)
)
diamonds %>%
mutate(
new=
if_else(
color=="E",
"E",
"not E"
)
) %>%
select(new,everything())
diamonds %>%
mutate(
new=
case_when(
color=="E"~"E",
color=="I"~"I",
TRUE~"not_E_I"
)
)
diamonds %>%
mutate(
new=
case_when(
color=="E"~"E",
color=="I"~"I",
TRUE~"not_E_I"
)
) %>%
select(new,everything())
df_name=
tibble(
key=c(1,1,3,2,5),
name=c("asuka","yuuki","siho","rina","manaka")
)
